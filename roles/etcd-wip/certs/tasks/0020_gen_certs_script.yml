---
- name: Gen_certs | create etcd cert dir
  file:
    path: "{{ etcd_cert_dir }}"
    group: "{{ etcd_cert_group }}"
    state: directory
    owner: "{{etcd_cert_user}}"
    mode: 0700
    recurse: yes

- name: "Gen_certs | create etcd script dir (on {{cert_host}})"
  file:
    path: "{{ etcd_script_dir }}"
    state: directory
    owner: "{{etcd_cert_user}}"
    mode: 0700
  run_once: yes
  delegate_to: "{{cert_host}}"

- name: "Gen_certs | create etcd cert dir (on {{cert_host}})"
  file:
    path: "{{ etcd_cert_dir }}"
    group: "{{ etcd_cert_group }}"
    state: directory
    owner: "{{etcd_cert_user}}"
    recurse: yes
    mode: 0700
  run_once: yes
  delegate_to: "{{cert_host}}"

- name: Gen_certs | write openssl config  (on {{cert_host}})
  template:
    src: "openssl.conf.j2"
    dest: "{{ etcd_config_dir }}/openssl.conf"
  run_once: yes
  delegate_to: "{{cert_host}}"
  when:
    - gen_certs|default(false)

- name: Gen_certs | copy certs generation script (on {{cert_host}})
  copy:
    src: "make-ssl-etcd.sh"
    dest: "{{ etcd_script_dir }}/make-ssl-etcd.sh"
    mode: 0700
  run_once: yes
  delegate_to: "{{cert_host}}"
  when:
    - gen_certs|default(false)

- name: Gen_certs | run cert generation script
  command: "bash -x {{ etcd_script_dir }}/make-ssl-etcd.sh -f {{ etcd_config_dir }}/openssl.conf -d {{ etcd_cert_dir }}"
  environment:
    - PEERS: "{% for m in groups['etcd'] %}
                  {% if hostvars[m].gen_certs %}
                    {{ m }}
                  {% endif %}
              {% endfor %}"
    - CLIENTS: "{% for h in groups['etcd-clients']|unique %}
                {% if hostvars[h].gen_certs %}
                    {{ h }}
                {% endif %}
              {% endfor %}"
  run_once: yes
  delegate_to: "{{cert_host}}"

- name: Gen_certs | Gather etcd peers certs
  slurp:
    src: "{{ item }}"
  register: etcd_peer_certs
  with_items: >-
    ["{{ etcd_cert_dir }}/ca.pem",
     "{{ etcd_cert_dir }}/ca-key.pem",
     {% for peer in groups['etcd'] %}
     '{{ etcd_cert_dir }}/admin-{{ peer }}.pem',
     '{{ etcd_cert_dir }}/admin-{{ peer }}-key.pem',
     '{{ etcd_cert_dir }}/member-{{ peer }}.pem',
     '{{ etcd_cert_dir }}/member-{{ peer }}-key.pem'
      {% endfor %}]
  delegate_to: "{{cert_host}}"
  when:
    - inventory_hostname in groups['etcd']


- name: Gen_certs | Gather etcd client certs
  slurp:
    src: "{{ item }}"
  register: etcd_client_certs
  with_items:
    - "{{ etcd_cert_dir }}/ca.pem"
    - "{{ etcd_cert_dir }}/client-{{ inventory_hostname }}.pem"
    - "{{ etcd_cert_dir }}/client-{{ inventory_hostname }}-key.pem"
  delegate_to: "{{cert_host}}"
  when:
    - inventory_hostname in groups['etcd-clients']
    - inventory_hostname not in groups['etcd']

- name: Gen_certs | Write etcd peer certs
  copy:
    dest: "{{ item.item }}"
    content: "{{ item.content | b64decode }}"
    group: "{{ etcd_cert_group }}"
    owner: "{{etcd_cert_user}}"
    mode: 0640
  with_items: "{{ etcd_peer_certs.results }}"
  when:
    - inventory_hostname in groups['etcd']
    - hostvars[inventory_hostname].gen_certs

- name: Gen_certs | Write etcd client certs
  copy:
    dest: "{{ item.item }}"
    content: "{{ item.content | b64decode }}"
    group: "{{ etcd_cert_group }}"
    owner: "{{etcd_cert_user}}"
    mode: 0640
  with_items: "{{ etcd_client_certs.results }}"
  when:
    - inventory_hostname in groups['etcd-clients']
    - hostvars[inventory_hostname].gen_certs
